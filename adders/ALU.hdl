// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=outZX);
    Not16(in=outZX, out=outNot16x);
    Mux16(a=outZX, b=outNot16x, sel=nx, out=outX);

    Mux16(a=y, b=false, sel=zy, out=outZY);
    Not16(in=outZY, out=outNot16y);
    Mux16(a=outZY, b=outNot16y, sel=ny, out=outY);

    Add16(a=outX, b=outY, out=outAdd16);
    And16(a=outX, b=outY, out=outAnd16);
    Mux16(a=outAnd16, b=outAdd16, sel=f, out=outMux16);

    Not16(in=outMux16, out=outNot16out);
    Mux16(a=outMux16, b=outNot16out, sel=no, out=output);

    Or16  (a=output, b=false, out[0..7]=outOr161);
    Or16  (a=output, b=false, out[8..15]=outOr162);
    Or8Way(in=outOr161, out=outOr8Way1);
    Or8Way(in=outOr162, out=outOr8Way2);
    Or    (a=outOr8Way1, b=outOr8Way2, out=outOrout);
    Mux   (a=true, b=false, sel=outOrout, out=zr);

    Or16 (a=output, b=false, out[15]=outOr16MSB);
    Mux  (a=false, b=true, sel=outOr16MSB, out=ng);

    Or16(a=output, b=false, out=out);
}
